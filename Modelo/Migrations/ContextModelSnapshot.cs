// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modelo;

#nullable disable

namespace Modelo.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entidades.Computadora", b =>
                {
                    b.Property<int>("ComputadoraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComputadoraId"), 1L, 1);

                    b.Property<string>("CodigoComputadora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripcionComputadora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LaboratorioId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("condicion")
                        .HasColumnType("int");

                    b.Property<int>("estado")
                        .HasColumnType("int");

                    b.HasKey("ComputadoraId");

                    b.HasIndex("LaboratorioId");

                    b.ToTable("Computadoras");
                });

            modelBuilder.Entity("Entidades.Laboratorio", b =>
                {
                    b.Property<int>("LaboratorioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LaboratorioId"), 1L, 1);

                    b.Property<int>("CapacidadMaxima")
                        .HasColumnType("int");

                    b.Property<string>("NombreLaboratorio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SedeId")
                        .HasColumnType("int");

                    b.HasKey("LaboratorioId");

                    b.HasIndex("SedeId");

                    b.ToTable("Laboratorios");
                });

            modelBuilder.Entity("Entidades.Sede", b =>
                {
                    b.Property<int>("SedeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SedeId"), 1L, 1);

                    b.Property<string>("DireccionSede")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreSede")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SedeId");

                    b.ToTable("Sedes");
                });

            modelBuilder.Entity("Entidades.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<string>("AgenteAsignado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoComputadora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComputadoraId")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTicket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("categoria")
                        .HasColumnType("int");

                    b.Property<int>("estado")
                        .HasColumnType("int");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.Property<int>("urgencia")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("ComputadoraId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Entidades.Computadora", b =>
                {
                    b.HasOne("Entidades.Laboratorio", "laboratorio")
                        .WithMany("Computadoras")
                        .HasForeignKey("LaboratorioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("laboratorio");
                });

            modelBuilder.Entity("Entidades.Laboratorio", b =>
                {
                    b.HasOne("Entidades.Sede", "sede")
                        .WithMany("Laboratorios")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sede");
                });

            modelBuilder.Entity("Entidades.Ticket", b =>
                {
                    b.HasOne("Entidades.Computadora", "computadora")
                        .WithOne("Ticket")
                        .HasForeignKey("Entidades.Ticket", "ComputadoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("computadora");
                });

            modelBuilder.Entity("Entidades.Computadora", b =>
                {
                    b.Navigation("Ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.Laboratorio", b =>
                {
                    b.Navigation("Computadoras");
                });

            modelBuilder.Entity("Entidades.Sede", b =>
                {
                    b.Navigation("Laboratorios");
                });
#pragma warning restore 612, 618
        }
    }
}
